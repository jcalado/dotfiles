set nocompatible              " be iMproved
filetype off                  " required!
set rtp+=/usr/local/opt/fzf

call plug#begin('~/.vim/plugged')


" My bundles here:
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'gregsexton/MatchTag'
Plug 'vim-ruby/vim-ruby'
Plug 'slim-template/vim-slim.git'

" Vim snippets
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'alvan/vim-closetag'

Plug 'kaicataldo/material.vim'
Plug 'itchyny/lightline.vim'
let g:lightline = { 'colorscheme': 'material_vim' }

" Vim tabular
Plug 'godlygeek/tabular'

" Markdown
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1

Plug 'slim-template/vim-slim'

" Comment blocks
Plug 'tomtom/tcomment_vim'

" Manage ( [ ' "
Plug 'tpope/vim-surround'

" Jump to matching HTML tag.
Plug 'vim-scripts/matchit.zip'

" filetypes
Plug 'kchmck/vim-coffee-script'
Plug 'ekalinin/Dockerfile.vim'
Plug 'chrisbra/csv.vim'

" Autocompletion
Plug 'ervandew/supertab'

" Comments
Plug 'tpope/vim-commentary'

" YAML
Plug 'lmeijvogel/vim-yaml-helper'

" Easy align
Plug 'junegunn/vim-easy-align'

" Add plugins to &runtimepath
call plug#end()

filetype plugin indent on     " required!

" Vim airline always
set laststatus=2

" Highlight syntax
syntax on

" Set colorscheme
set background=dark
colorscheme material
hi Normal ctermbg=none
hi LineNr ctermfg=grey

" Highlight search results
set hlsearch


set number
set relativenumber

set expandtab
set smarttab
set shiftwidth=2 " Number of spaces used in auto-indentation.
set tabstop=2 " A tab is equal to 2 spaces. Coding practice for ruby.

set autoindent
set smartindent

let html_no_rendering=1
set clipboard=unnamed

" Highlight current line
set cursorline 

" Undo
set undolevels=999999

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_ruby_checkers = ['rubocop']

" Control p 
nnoremap <silent> <C-P> :FZF<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%101v.\+/
